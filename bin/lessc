#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('sys'),
    util = require('util');

require.paths.unshift(path.join(__dirname, '..', 'lib'));

var less = require('less');
var args = process.argv.slice(1);
var options = {
    compress: false,
    optimization: 1,
    silent: false
};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            sys.puts("lessc " + less.version.join('.') + " (LESS Compiler) [JavaScript]");
            process.exit(0);
        case 'verbose':
            options.verbose = true;
            break;
        case 's':
        case 'silent':
            options.silent = true;
            break;
        case 'h':
        case 'help':
            sys.puts("usage: lessc source [destination]");
            process.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
        case 'w':
        case 'watch':
            options.watch = true;
            break;
        case 'O0': options.optimization = 0; break;
        case 'O1': options.optimization = 1; break;
        case 'O2': options.optimization = 2; break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = path.join(process.cwd(), input);
}
var output = args[2];
if (output && output[0] != '/') {
    output = path.join(process.cwd(), output);
}

var css, fd, tree;

if (! input) {
    sys.puts("lessc: no input files");
    process.exit(1);
}

var processLessFile = function (e, data, callback) {
    if (e) {
        sys.puts("lessc: " + e.message);
        process.exit(1);
    }

    var env = {
        paths: [path.dirname(input)],
        imports: [],
        optimization: options.optimization,
        filename: input
    }

    new(less.Parser)(env).parse(data, function (err, tree) {
        if (err) {
            less.writeError(err, options);
        } else {
            try {
                css = tree.toCSS({ compress: options.compress });
                if (output) {
                    fd = fs.openSync(output, "w");
                    fs.writeSync(fd, css, 0, "utf8");
                    util.log("Wrote file: "+output);
                } else {
                    sys.print(css);
                }
            } catch (e) {
                less.writeError(e, options);
            }
            callback(null, env.imports);
        }
    });
};

var watching = {};

var change = function (curr, prev) {
  if (+curr.mtime > +prev.mtime) {
    process.nextTick(function() {
      util.log("Change detected... Updated");
      processInput()
    });
  }
}

var processInput = function() {
  fs.readFile(input, 'utf-8', function(err, fd) {
    processLessFile(err, fd, function(err, imports) {
      if (options.watch) {
        (imports.concat([input])).forEach(function(file) {
          if (!watching[file]) {
            fs.watchFile(file, change);
            watching[file] = true;
          }
        });
      }
    });
  });
}
processInput();
